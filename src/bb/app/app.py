# http://www.bionicbunny.org/
# Copyright (c) 2012-2013 Sladeware LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: Oleksandr Sviridenko <info@bionicbunny.org>

"""This module describes BB application. An application is defined by a BB model
and is comprised of a set of processes running on a particular system topology
to perform work meeting the application's requirements. Each process correnspond
to the appropriate :class:`bb.app.mapping.Mapping` instance from `mappings`.
"""

import inspect
import imp
import logging
import types
import os

from bb.app.mapping import Mapping
from bb.app.imc_network import Network
from bb.utils import pyimport
from bb.utils import typecheck
from bb.utils import path_utils

_applications = {}

class Application(object):
  """Base class for those who needs to maintain global application state.

  Normally you don't need to subclass this class.
  """

  build_dir = "build"
  settings_dir = ".bbapp"

  def __init__(self, home_dir=None):
    """If `home_dir` was specified and it's not existed home directory, the new
    directory will be initialized.
    """
    self._network = Network()
    self._home_dir = None
    self._build_dir = None
    if not home_dir:
      mod = inspect.getmodule(inspect.getouterframes(inspect.currentframe())[1][0])
      caller_dir = path_utils.dirname(inspect.getfile(mod)) or "."
      home_dir = Application.find_home_dir(caller_dir)
      if not home_dir:
        self._init_home_dir(caller_dir)
    else:
      if not self.is_home_dir(home_dir):
        self._init_home_dir(home_dir)
    self._set_home_dir(home_dir)
    default_build_dir = path_utils.join(self._home_dir, self.__class__.build_dir)
    self.set_build_dir(default_build_dir, make=True)

  def __str__(self):
    return "%s[num_mappings=%d]" % (self.__class__.__name__,
                                    self.get_num_mappings())

  def _init_home_dir(self, home_dir):
    # NOTE, it will also use set_home_dir() method once the directory was
    # initialized.
    if not path_utils.exists(home_dir):
      raise IOError("'%s' doesn't exist" % home_dir)
    settings_dir = path_utils.join(home_dir, self.__class__.settings_dir)
    path_utils.mkpath(settings_dir)
    self._set_home_dir(home_dir)
    return home_dir

  def _set_home_dir(self, home_dir):
    if not path_utils.exists(home_dir):
      raise Exception("`%s' doesn't exist" % home_dir)
    if self._home_dir:
      del _applications[self]
    self._home_dir = home_dir
    _applications.setdefault(home_dir, self)

  def set_build_dir(self, path, make=False):
    """Sets path to the build directory. The build directory will be used to
    store temporary/autogenerated and compiled build-files.
    """
    if not path_utils.exists(path):
      if not make:
        raise Exception("`%s' doesn't exist" % path)
      path_utils.mkpath(path)
    self._build_dir = path

  def get_build_dir(self):
    """Returns build directory"""
    return self._build_dir

  @classmethod
  def is_home_dir(cls, path):
    if not typecheck.is_string(path):
      raise TypeError("'path' has to be a string")
    elif not path_utils.exists(path):
      raise IOError("'%s' path doesn't exist" % path)
    return cls.settings_dir in os.listdir(path)

  def get_home_dir(self):
    """Returns home directory"""
    return self._home_dir

  def get_network(self):
    return self._network

  # Begin mapping management

  def get_mappings(self):
    return self._network.get_nodes()

  def get_num_mappings(self):
    """Returns number of mappings controlled by this application."""
    return len(self.get_mappings())

  def has_mapping(self, mapping):
    if not isinstance(mapping, Mapping):
      raise TypeError("Mapping must be derived from bb.app.mapping.Mapping")
    return self._network.has_node(mapping)

  def add_mapping(self, mapping):
    """Registers a mapping and adds it to the application network. Returns
    whether or not the mapping was added.
    """
    if self.has_mapping(mapping):
      return False
    self._network.add_node(mapping)
    return True

  def add_mappings(self, mappings):
    """Adds all mappings from list `mappings`. See :func:`add_mapping`."""
    if not typecheck.is_list(mappings):
      raise TypeError("'mappings' must be list")
    for mapping in mappings:
      self.add_mapping(mapping)

  def remove_mapping(self, mapping):
    if not isinstance(mapping, Mapping):
      raise TypeError("'mapping' must be derived from %s" % Mapping.__class__)
    if not self.has_mapping(mapping):
      return False
    self._network.remove_node(mapping)
    return True

  def remove_all_mappings(self):
    for mapping in self.get_mappings():
      self.remove_mapping(mapping)

  def get_mapping(self, name):
    if not typecheck.is_string(name):
      raise TypeError("must be a string")
    # Search for the mapping with specified name in the network
    for mapping in self.get_mappings():
      if mapping.get_name() == name:
        return mapping
    return None

  # end mapping management

def _home_import_hook():
  """Handles imports from fake `bb.app.home` package."""
  get_globals = globals
  get_locals = locals
  def hook(self, name, globals=None, locals=None, fromlist=None, level=-1):
    if name.startswith("bb.app.home") and fromlist:
      home_mod = __import__("bb.app.home", get_globals(), get_locals(),
                            [], -1)
      for _ in fromlist:
        try:
          _ = _.split(".")
          _ = path_utils.join(*_)
          path = path_utils.join(Application.get_home_dir(), "%s.py" % _)
          mod = imp.load_source(".".join([name, _]), path)
        except IOError, e:
          raise ImportError("Module `%s' doesn't exist" % (path))
        setattr(home_mod, _, mod)
      return home_mod
    return pyimport.ModuleImporter.import_module(self, name, globals, locals,
                                                 fromlist, level)
  # Update importer and install fixed importer
  importer = pyimport.get_importer()
  importer.import_module = types.MethodType(hook, importer,
                                            pyimport.ModuleImporter)
  pyimport.install_importer(importer)

#_home_import_hook()
